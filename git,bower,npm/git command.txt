настроки в гите после его установки на пк (глобальные настройки для всех репозиториев на данном пк):
git config --global user.name 'vasily-d'
git config --global user.email den771981@mail.ru

git config --list //все настроки по гиту
"C:\Users\Saber\.gitconfig" + program files

цикл:
work folder (новые или измененные файлы) -> add ->
	подготовленные, отслеживание, фиксация (после add - staging area) -> commit ->
		зафиксированные в РЕПОЗИТОРИИ! (после commit - git directory) ->
			push (перенос на удаленный репозиторий) 

---------------------------------------------------------------------------
//основные команды для работы с репозиторием

// 1 - создания пустого репозитория git в рабочей (текущей) папке
git init

// 2 - в какой ветке, что отслеживается или нет, изменения? есть ли что комитить? (для add)
git status

// 3 - отслеживать конкретный файл или все для комита в дальнейшем
git add contacts.txt
git add js/contacts.txt

//все файлы и подпапки из рабочей папки в отслеживаемые
git add .

// 3.1 - снять отслеживание на файл после его добавление через add
git reset HEAD имя файла с расширением

//перевод файла в не отслеживаемый после ADD (после add и до commit) - например, ошибочно add
git reset HEAD 1.txt
git reset HEAD

// 4 - комитить, примеры:
git commit -m 'my first commit'
git commit -m 'sass lessons'
git commit -m 'remove index.html'
git commit -m 'add file style.css'
	"add new js project"

//два в одном add + commit
git commit -a -m 'my last commit'

// 5 - что попало в комит - общая информация по всем коммитам (для commit)
git log
//в развернутом варианте - имя автора, дата, хеш, почта, какие файлы были изменены и какие файлы изменения не затронули - q - quit
git log -p
//два последних файла по коммитам
git log -p -2
//последний коммит
git log -p -1

// 6 - возврат к прошлым коммитам - откат на прошлые коммиты по 7 первым хеш суммам коммита - после COMMIT
git checkout 7 цифр в коммите по git log

// возврат к последнему коммиту (самому последнему)
git checkout master

// возврат к предыдущему состоянию файла если нужно отменить все изменения (modified) в нем
git checkout -- имя файла

//откат на файл и его изменение - точечный откат
git checkout -- 1.txt //например, не тот файл изменил

// изменяет структуру рабочей папки - общий откат - например, ошибочно commit
git checkout имя ветки на которую переключаемся - хеш сумма

//удаление файла после commit из папки и репозитория и восстановление этого удаленного файла!
git rm 1.txt	//в текущей ветке
git reset HEAD 1.txt
git checkout -- 1.txt


// 7 -что изменяли до add (после add уже ничего не выведит)
git diff


// 8.1 - перенос на удаленный репозиторий (clone, pull, push)
//создаем и добавляем алиас - site(это произвольное название)
git remote add site https://github.com/vasily-d/jquery-lessons.git
git remote	//наши алиасы
git remote -v	//куда они ссылаются - https://...
git remote rm site удаление алиаса
git remote rename currentnamebranch newbranch

// 8.2 - загрузка на удаленный репозиторий
git push -u site master	//c мин количеством сообщений
git push site master (site это алиас)
или
git push origin master (origin - короткое название ссылки на удаленный репозиторий после клона репозитория)
//загрузка новой ветки на репозиторий (должны находиться в ней же)
git push site newBranch
->
//user и password - vasily-d

// 9 - клонирование и pull (Они забирают клон, но pull также делает Update только того что изменилось)
// pull берет репозиторий и сливает с вашими ветками если они есть!
git init (сперва нужно создать пустой репозиторий)
git pull путь к репозиторию который нужно склонировать полностью в текущую папку и создает свою папку(https://)

// 9.1 полное клонирование без запроса логина и пароля (без git init)
git clone путь к репозиторию который нужно склонировать полностью в текущую папку и создает свою папку(https://)

// 10 - fetch - снимает всю инормацию с удаленного репозитория, но не обновляет ваши файлы в каталоге (без merge)
git fetch site



---------------------------------------------------------------------------
// Ветки (неограниченное количество). Master - основная ветка по умолчанию при создании репозитория. новая ветка хранит как прошлые так и свои коммиты!
c1 -> c2 -> c3 -> c5 -> c7     -> c8
	       -> c4 -> c6 -> (merge c6 to c7 in c8 - с конфликтом (вручную правится) или без (если правились разные места кода в проекте!))

ВАЖНО:
ветки (не мастер) видят как свои изменения так и изменения Master, но до создания этой ветки при git log.
master видит только свои измения и не видит другие ветки по git log!

// log с отображение текущей ветки (изменение master+изменение после ответвления. если это не сама ветка master!)
git log --graph

// все баги лучше править в отдельных ветках даже если это temp ветки
// все ветки и на какой ветки мы сейчас находимся
git branch
git branch -a //вывести все ветки - и репозиторные ветки которыми мы управлять не можем!

//создание новой ветки без перехода в нее!
git branch имя
//удаление ветки (не забыть с нее уйти до этого)
git branch -d имя ветки
//принудительное удаление ветки (если в ней были изменения не закомиченные)!!!
git branch -D имя ветки
// посмотреть все ветки на удаленном сервере
git branch -r

//переключение на новую ветку (изменяется структура проекта!)
git checkout имя ветки
//создание ветки и сразу переход на нее
git checkout -b имя ветки

//слияние веток - сперва переходим в ту ветку с которой будем сливаться, например master
ВАЖНО: ПЕРЕД merge ветки master с другой веткой нужно в master сделать изменение и закомитить и после уже делать merge или же просто находясь в master создать нужную ветку, перейти в нее и закомитеть все изменения уже в ней, а после слить master с данной веткой. После log --graph все нормально покажет!
При запуске gulp он меняет содержимое проекта!

git merge имя сливаемой ветки с текущей веткой в которой мы сейчас находимся
//все конфликты правятся вручную! - открываем, правим сами, add  и commit -m и push. после этого merge завершается!
//если конфликт при мерже, то правим вручную и делаем коммит с комментарием о мерже и удаляем смерженную ветку которую присоединяли к основной - принудительно если надо!
//если они есть то в файл добавляются метки где верхняя часть это всегда текущая ветка. их и нужно удалять вручную

git merge --abort


---------------------------------------------------------------------------
//дополнительные команды

//версия установленного git
git version или git --version

//rename file - (add но не комитит! надо потом еще это и закомитить) 
git mv js/1.txt js/2.txt

//удаление файла из папки
rm имя файла с расширением

//очистка консоли
clear

//выход из консоли
exit
ctrl+c q
ctrl+c :quit! + enter (vim)
// выход из vim при merge - ctrl+с -> :quit!

readme.md - описание репозитория при его открытии